{"version":3,"sources":["actions/index.ts","reducers/index.ts","services/CodeExecutionWebWorker.ts","components/JassGame/JassGame.tsx","config.ts","components/CodeEditor/CodeTestRunner.tsx","store/index.ts","components/ui/JSONObject.tsx","components/CodeEditor/MoveDebugger.tsx","components/CodeEditor/ConsoleView.tsx","components/JassGame/CardView.tsx","components/JassGame/JassBoardView.tsx","components/JassGame/JassStateView.tsx","components/CodeEditor/GameDebugger.tsx","components/CodeEditor/StartNewGameButton.tsx","components/CodeEditor/CodeEditor.tsx","components/Flow.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["setRequestNextAction","payload","type","codeTestResult","setDebuggerSettings","localStorage","setItem","JSON","stringify","setPaused","initialState","nextAction","gameState","flow","currentStep","paused","debugger","getItem","parse","speed","stateFilter","renderGameState","pauseOnTurn","codeTest","status","results","editor","playerCode","rootReducer","state","action","map","r","undefined","error","reduce","a","b","actionRequest","actionResult","playerCodeChanged","cache","Map","hashCode","s","split","charCodeAt","createWorker","code","blobUrl","URL","createObjectURL","Blob","url","worker","Worker","codeExecutionWorker","execution","useCache","Promise","resolve","workerHolder","workerJavascript","hash","has","set","get","timeout","setTimeout","forceKill","value","message","fn","executionTime","kill","clearTimeout","terminate","revokeObjectURL","delete","onmessage","event","data","onerror","postMessage","webSocket","config","websocketUrl","handleBackpressure","newGameSaga","calculateSaga","sendActionSaga","evaluateFunction","description","handCards","playableCards","tableStack","Error","actionChannel","channel","pauseChannel","take","i","select","delay","messageType","put","takeEvery","sendMessage","call","result","console","log","actionType","ref","onWebsocketMessage","store","dispatch","JassGame","topics","onMessage","runTestsSaga","takeLatest","tests","length","currentTestResults","connect","test","badges","content","showIcon","placement","key","totalExecutionTime","red","Math","min","green","style","paddingRight","whiteSpace","fontWeight","color","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","run","JSONObject","props","theme","iconStyle","indentWidth","display","name","collapsed","enableClipboard","displayObjectSize","displayDataTypes","src","object","match","functionName","functionParameters","functionRegex","matches","exec","push","groups","argumentNames","find","arguments","trim","fontFamily","span","join","textAlign","parameter","paddingLeft","ConsoleView","logOutput","logs","logOutputEntry","TeamStack","teamCards","cards","filter","c","team","className","top","left","TableStack","playOrder","sort","startingPlayerIndex","teams","players","indexOf","player","nextPlayer","tableStackCards","cs","card","transform","OtherPlayerCards","handCardCount","opacity","Array","from","unused","transformOrigin","PlayerCards","playerName","points","suit","UnknownCardView","backgroundImage","CardView","renderView","gameStateView","mapNextActionToHumanReadable","flatMap","t","mapPlayerToHumanReadable","playingMode","mapPlayingModeToHumanReadable","revision","Panel","Collapse","Option","Select","consoleLogs","consoleOutput","debuggerTitle","width","float","offset","count","consoleTitle","stateTitle","backgroundColor","overflowCount","offsetTop","height","overflowY","defaultActiveKey","header","onChange","e","changeSpeed","checked","changePauseOnTurn","labelInValue","defaultValue","startNewGame","resume","codeTestState","isGameRunning","useEffect","keyDown","keyCode","preventDefault","onKeyDown","document","addEventListener","removeEventListener","disabled","icon","CaretRightOutlined","loading","onClick","onValueChange","navigator","platform","metaKey","ctrlKey","getState","success","position","zIndex","right","paddingTop","highlight","languages","js","padding","fontSize","Step","Steps","step","contentFlow","current","next","title","Header","Layout","Content","App","mode","defaultSelectedKeys","Item","margin","minHeight","Boolean","location","hostname","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.29b08cc7.chunk.js","sourcesContent":["import { CodeExecutionResult } from '../services/CodeExecutionWebWorker';\r\nimport { GameDebuggerState, WebsocketMessage } from \"../reducers\";\r\n\r\nexport type ActionType =\r\n    'RUN_NEW_GAME'\r\n    | 'UPDATE_GAME_STATE'\r\n    | 'SET_ACTION_REQUEST'\r\n    | 'SET_ACTION_RESULT'\r\n    | 'UPDATE_CODE'\r\n    | 'SET_CODE_ERROR'\r\n    | 'SET_NEXT_FLOW_STEP'\r\n    | 'CODE_TEST_REQUEST'\r\n    | 'CODE_TEST_RESULT'\r\n    | 'QUEUE_WEBSOCKET_MESSAGE'\r\n    | 'SET_DEBUGGER_SETTINGS'\r\n    | 'SET_PAUSED';\r\n\r\nexport interface Action {\r\n    type: ActionType;\r\n    payload: any;\r\n}\r\n\r\nexport function runNewGame(payload: any): Action {\r\n    return { type: 'RUN_NEW_GAME', payload: payload }\r\n}\r\n\r\nexport function setRequestNextAction(payload: any): Action {\r\n    return { type: 'SET_ACTION_REQUEST', payload: payload }\r\n}\r\n\r\nexport function setResultCodeExecution(payload: CodeExecutionResult): Action {\r\n    return { type: 'SET_ACTION_RESULT', payload: payload }\r\n}\r\n\r\nexport function updateGameState(payload: any): Action {\r\n    return { type: 'UPDATE_GAME_STATE', payload: payload }\r\n}\r\n\r\nexport function updateCode(payload: string): Action {\r\n    return { type: 'UPDATE_CODE', payload: payload }\r\n}\r\n\r\nexport function setNextFlowStep(payload: number): Action {\r\n    return { type: 'SET_NEXT_FLOW_STEP', payload: payload }\r\n}\r\n\r\nexport function setCodeError(payload: any): Action {\r\n    return { type: 'SET_CODE_ERROR', payload: payload }\r\n}\r\n\r\nexport function codeTestRequest(): Action {\r\n    return { type: 'CODE_TEST_REQUEST', payload: null }\r\n}\r\n\r\nexport function codeTestResult(payload: CodeExecutionResult[]): Action {\r\n    return { type: 'CODE_TEST_RESULT', payload: payload }\r\n}\r\n\r\nexport function queueWebsocketMessage(payload: WebsocketMessage): Action {\r\n    return { type: 'QUEUE_WEBSOCKET_MESSAGE', payload: payload }\r\n}\r\n\r\nexport function setDebuggerSettings(payload: GameDebuggerState): Action {\r\n    localStorage.setItem('debugger_settings', JSON.stringify(payload));\r\n    return { type: 'SET_DEBUGGER_SETTINGS', payload: payload }\r\n}\r\n\r\nexport function setPaused(payload: boolean): Action {\r\n    return { type: 'SET_PAUSED', payload: payload }\r\n}","import { Action } from '../actions';\r\nimport { CodeExecutionResult } from '../services/CodeExecutionWebWorker';\r\n\r\nexport interface State {\r\n    nextAction: string;\r\n    gameState: GameState;\r\n    actionRequest?: RemoteActionRequest;\r\n    actionResult?: CodeExecutionResult;\r\n    editor: CodeEditorState;\r\n    debugger: GameDebuggerState;\r\n    codeTest: CodeTestState;\r\n    flow: Flow;\r\n    paused: boolean;\r\n}\r\n\r\nexport interface WebsocketMessage {\r\n    messageType: 'state' | 'action-request';\r\n    payload: GameState | RemoteActionRequest;\r\n}\r\n\r\nexport interface CodeTestState {\r\n    status: 'FAIL' | 'SUCCESS';\r\n    results: CodeExecutionResult[];\r\n}\r\n\r\nexport interface CodeEditorState {\r\n    playerCode: string;\r\n}\r\n\r\nexport interface GameDebuggerState {\r\n    speed: number;\r\n    stateFilter: 'ALL' | 'PLAYER_ONLY';\r\n    pauseOnTurn: boolean;\r\n    renderGameState: boolean;\r\n}\r\n\r\nexport interface Flow {\r\n    currentStep: number;\r\n}\r\n\r\nexport interface RemoteActionRequest {\r\n    action: string;\r\n    handCards: Card[];\r\n    playableCards: Card[];\r\n    tableStack: Card[];\r\n    gameState: GameState;\r\n}\r\n\r\nexport interface GameState {\r\n    playerName: string;\r\n    revision: number;\r\n    nextAction: string;\r\n    nextPlayer: string;\r\n    playingMode: string;\r\n    shifted: boolean;\r\n    teams: Team[];\r\n    cards: CardState[];\r\n}\r\n\r\nexport interface Team {\r\n    name: string;\r\n    players: string[];\r\n    points: number;\r\n}\r\n\r\nexport interface CardState {\r\n    card: Card;\r\n    player: string;\r\n    playOrder: number;\r\n    team: string;\r\n    isTrump: boolean;\r\n    points: number;\r\n}\r\n\r\nexport interface Card {\r\n    color: string;\r\n    suit: string;\r\n}\r\n\r\nconst initialState: State = {\r\n    nextAction: '',\r\n    gameState: null,\r\n    flow: {\r\n        currentStep: 0,\r\n    },\r\n    paused: false,\r\n    debugger: !!localStorage.getItem('debugger_settings') ? JSON.parse(localStorage.getItem('debugger_settings')) : {\r\n        speed: 75,\r\n        stateFilter: 'ALL',\r\n        renderGameState: true,\r\n        pauseOnTurn: false,\r\n    },\r\n    codeTest: {\r\n        status: 'SUCCESS',\r\n        results: []\r\n    },\r\n    editor: {\r\n        playerCode: !!localStorage.getItem('playerCode') ? localStorage.getItem('playerCode') :\r\n            `\r\n/**\r\n * Is called in the beginning of a round if you are the first player.\r\n *\r\n * @param {object[]} handCards  The cards in the players hands\r\n * @param {object} gameState    The current state of the game\r\n * @returns {boolean}           If your team mate should choose the playing mode («Gschobe»)\r\n */\r\nfunction decideShift(handCards, gameState) {\r\n    return false;\r\n}\r\n\r\n/**\r\n * This function chooses a playing mode. Following playing modes are valid:\r\n * \r\n * TOP_DOWN, BOTTOM_UP, TRUMP_HEARTS, TRUMP_SPADES, TRUMP_DIAMONDS, TRUMP_CLUBS\r\n *\r\n * @param {object[]} handCards  The cards in the players hands\r\n * @param {object} gameState    The current state of the game\r\n * @returns {string}            The playing mode for this round\r\n */\r\nfunction choosePlayingMode(handCards, gameState) {\r\n    return 'TRUMP_HEARTS';\r\n}\r\n\r\n/**\r\n * This function is called whenever your player starts a «Stich». All hand cards can be played.\r\n * \r\n * @param {object[]} handCards  The cards in the players hands\r\n * @param {object} gameState    The current state of the game\r\n * @returns {object}            The card to play as first player\r\n */\r\nfunction startStich(handCards, gameState) {\r\n    return playCard(handCards, handCards, [], gameState);\r\n}\r\n\r\n/**\r\n * This function is called whenever your player needs to play. Only the playableCards can be played.\r\n * \r\n * @param {object[]} handCards      The cards in the players hands\r\n * @param {object[]} playableCards  The playable cards in the players hand\r\n * @param {object[]} tableStack     The cards laying on the table in correct order\r\n * @param {object} gameState        The current state of the game\r\n * @returns {object}                The card to play\r\n */\r\nfunction playCard(handCards, playableCards, tableStack, gameState) {\r\n    console.log('handCards', handCards);\r\n    console.log('playableCards', playableCards);\r\n    console.log('tableStack', tableStack);\r\n    console.log('gameState', gameState);\r\n    \r\n    return playableCards[0];\r\n}\r\n`\r\n    }\r\n};\r\n\r\nfunction rootReducer(state: State = initialState, action: Action): State {\r\n    switch (action.type) {\r\n        case 'SET_PAUSED':\r\n            return {\r\n                ...state,\r\n                ...{\r\n                    paused: action.payload,\r\n                }\r\n            };\r\n        case 'RUN_NEW_GAME':\r\n            break;\r\n        case 'QUEUE_WEBSOCKET_MESSAGE':\r\n            break;\r\n        case 'SET_DEBUGGER_SETTINGS':\r\n            return {\r\n                ...state,\r\n                ...{\r\n                    debugger: action.payload,\r\n                }\r\n            };\r\n        case 'CODE_TEST_REQUEST':\r\n            return {\r\n                ...state,\r\n                ...{\r\n                    codeTest: {\r\n                        status: 'SUCCESS',\r\n                        results: []\r\n                    }\r\n                }\r\n            };\r\n        case 'CODE_TEST_RESULT':\r\n            return {\r\n                ...state,\r\n                ...{\r\n                    codeTest: {\r\n                        status: action.payload.map((r: any) => r.error === undefined)\r\n                            .reduce((a: boolean, b: boolean) => a && b, true) ? 'SUCCESS' : 'FAIL',\r\n                        results: action.payload\r\n                    }\r\n                }\r\n            };\r\n        case 'SET_NEXT_FLOW_STEP':\r\n            return {\r\n                ...state,\r\n                ...{\r\n                    flow: {\r\n                        currentStep: action.payload\r\n                    }\r\n                }\r\n            };\r\n        case 'SET_ACTION_REQUEST':\r\n            return {\r\n                ...state,\r\n                ...{ actionRequest: action.payload },\r\n            };\r\n        case 'SET_ACTION_RESULT':\r\n            return {\r\n                ...state,\r\n                ...{ actionResult: action.payload },\r\n            };\r\n        case 'UPDATE_GAME_STATE':\r\n            return {\r\n                ...state,\r\n                ...{ gameState: action.payload }\r\n\r\n            };\r\n        case 'UPDATE_CODE':\r\n            return {\r\n                ...state,\r\n                ...{\r\n                    editor: {\r\n                        playerCode: action.payload\r\n                    }\r\n                }\r\n            };\r\n        case 'SET_CODE_ERROR':\r\n            return {\r\n                ...state,\r\n                ...{\r\n                    editor: {\r\n                        ...state.editor, ...{\r\n                            playerCodeChanged: false,\r\n                            error: action.payload\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default rootReducer;","const TIMEOUT = 1000;\r\n\r\nexport interface CodeExecutionDescription {\r\n    description: string,\r\n    fn: string\r\n}\r\n\r\nexport interface CodeExecutionResult {\r\n    description: string,\r\n    fn: string,\r\n    executionTime: number,\r\n    consoleOutput?: ConsoleLog[],\r\n    result?: string,\r\n    error?: string\r\n}\r\n\r\nexport interface ConsoleLog {\r\n    level: 'log' | 'error';\r\n    payload: any[];\r\n}\r\n\r\ninterface WorkerHolder { url: string, worker: Worker };\r\n\r\nconst cache = new Map<number, WorkerHolder>();\r\n\r\nconst hashCode = (s: string) => {\r\n    return s.split(\"\").reduce((a, b) => {\r\n        a = ((a << 5) - a) + b.charCodeAt(0);\r\n        return a & a\r\n    }, 0);\r\n}\r\n\r\nconst createWorker = (code: string): WorkerHolder => {\r\n    const blobUrl = URL.createObjectURL(new Blob([code], { type: 'text/javascript' }))\r\n    return { url: blobUrl, worker: new Worker(blobUrl) };\r\n}\r\n\r\nexport function codeExecutionWorker(code: string, execution: CodeExecutionDescription, useCache: boolean = false): Promise<CodeExecutionResult> {\r\n    return new Promise((resolve: (value: CodeExecutionResult) => void) => {\r\n        const workerJavascript = `${code}\r\n        var logFn = console.log;\r\n        console.clear();\r\n        \r\n        self.addEventListener('message', function(event) {\r\n            var log = [];\r\n        \r\n            console.log = (...args) => {\r\n                log.push({level: 'log', payload: args });\r\n                logFn('worker', ...args);\r\n            }\r\n        \r\n            var t0 = performance.now()\r\n            var result = eval(event.data.fn);\r\n            var t1 = performance.now()\r\n        \r\n            let execution;\r\n            var t0 = performance.now()\r\n            try {\r\n                var result = eval(event.data.fn);\r\n                \r\n                if (result === undefined || result === null) {\r\n                    throw new Error('Return value is ' + result);\r\n                }\r\n                \r\n                var t1 = performance.now()\r\n            \r\n                execution = { description: event.data.description, fn: event.data.fn, result: JSON.stringify(result), consoleOutput: log, executionTime: parseInt(t1 - t0) }\r\n            } catch (e) {\r\n                var t1 = performance.now()\r\n                execution = { description: event.data.description, fn: event.data.fn, error: e.message, consoleOutput: log, executionTime: parseInt(t1 - t0) }\r\n            }\r\n        \r\n            self.postMessage(execution);\r\n        }, false);`;\r\n\r\n        let workerHolder: WorkerHolder;\r\n        let hash: number;\r\n\r\n        if (useCache) {\r\n            const hash = hashCode(workerJavascript);\r\n\r\n            if (!cache.has(hash)) {\r\n                cache.set(hash, createWorker(workerJavascript));\r\n            }\r\n\r\n            workerHolder = cache.get(hash);\r\n        } else {\r\n            workerHolder = createWorker(workerJavascript);\r\n        }\r\n\r\n        const timeout = setTimeout(() => {\r\n            forceKill();\r\n            resolve({\r\n                ...execution,\r\n                ...{\r\n                    value: null,\r\n                    error: JSON.stringify({message: 'Your code is too slow and timed out after ' + TIMEOUT + ' ms'}),\r\n                    fn: code,\r\n                    executionTime: TIMEOUT\r\n                }\r\n            });\r\n        }, TIMEOUT);\r\n\r\n        const kill = () => {\r\n            clearTimeout(timeout);\r\n\r\n            if (!useCache) {\r\n                workerHolder.worker.terminate();\r\n                URL.revokeObjectURL(workerHolder.url);\r\n            }\r\n        }\r\n\r\n        const forceKill = () => {\r\n            clearTimeout(timeout);\r\n            cache.delete(hash);\r\n            workerHolder.worker.terminate();\r\n            URL.revokeObjectURL(workerHolder.url);\r\n        }\r\n\r\n        workerHolder.worker.onmessage = (event) => {\r\n            kill();\r\n            resolve(event.data);\r\n        }\r\n\r\n        workerHolder.worker.onerror = (error) => {\r\n            kill();\r\n            if (error.message !== undefined) {\r\n                resolve({\r\n                    ...execution,\r\n                    ...{\r\n                        value: null,\r\n                        error: error.message,\r\n                        fn: code,\r\n                        executionTime: 0\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        workerHolder.worker.postMessage(execution);\r\n    });\r\n}","import React from 'react';\r\nimport { RemoteActionRequest, State, WebsocketMessage } from '../../reducers';\r\n// @ts-ignore\r\nimport SockJsClient from 'react-stomp';\r\nimport {\r\n    Action,\r\n    queueWebsocketMessage,\r\n    setPaused,\r\n    setRequestNextAction,\r\n    setResultCodeExecution,\r\n    updateGameState\r\n} from '../../actions';\r\nimport store from '../../store';\r\nimport { CodeExecutionDescription, codeExecutionWorker } from '../../services/CodeExecutionWebWorker';\r\nimport { actionChannel, call, delay, put, select, take, takeEvery } from 'redux-saga/effects'\r\nimport config from \"../../config\";\r\n\r\nlet webSocket: any;\r\n\r\nconst evaluateFunction = (action: RemoteActionRequest): CodeExecutionDescription => {\r\n    switch (action.action) {\r\n        case 'DECIDE_SHIFT':\r\n            return {\r\n                description: 'DECIDE_SHIFT',\r\n                fn: `decideShift(${JSON.stringify(action.handCards)},${JSON.stringify(action.gameState)})`\r\n            };\r\n        case 'SET_PLAYING_MODE':\r\n            return {\r\n                description: 'SET_PLAYING_MODE',\r\n                fn: `choosePlayingMode(${JSON.stringify(action.handCards)},${JSON.stringify(action.gameState)})`\r\n            };\r\n        case 'START_STICH':\r\n            return {\r\n                description: 'START_STICH',\r\n                fn: `startStich(${JSON.stringify(action.handCards)},${JSON.stringify(action.gameState)})`\r\n            };\r\n        case 'PLAY_CARD':\r\n            return {\r\n                description: 'PLAY_CARD',\r\n                fn: `playCard(${JSON.stringify(action.handCards)},${JSON.stringify(action.playableCards)},${JSON.stringify(action.tableStack)},${JSON.stringify(action.gameState)})`\r\n            }\r\n        default:\r\n            throw new Error(`Unknown action: ${JSON.stringify(action)}`);\r\n    }\r\n}\r\n\r\nexport function* handleBackpressure() {\r\n    const channel = yield actionChannel('QUEUE_WEBSOCKET_MESSAGE');\r\n    const pauseChannel = yield actionChannel('SET_PAUSED')\r\n    while (true) {\r\n        const action = (yield take(channel)).payload as WebsocketMessage;\r\n        for (let i = 0; i < 100 - (yield select((state: State) => state.debugger.speed)); i++) {\r\n            yield delay(10);\r\n        }\r\n\r\n        while ((yield select((state: State) => state.paused))) {\r\n            yield take(pauseChannel);\r\n        }\r\n\r\n        if (action.messageType === 'state') {\r\n            yield put(updateGameState(action.payload));\r\n        }\r\n\r\n        if (action.messageType === 'action-request') {\r\n            if ((yield select((state: State) => state.debugger.pauseOnTurn))) {\r\n                yield put(setPaused(true));\r\n            }\r\n            yield put(setRequestNextAction(action.payload));\r\n        }\r\n    }\r\n}\r\n\r\nexport function* newGameSaga() {\r\n    yield takeEvery('RUN_NEW_GAME', (action: Action) => {\r\n        webSocket.sendMessage('/app/jass/new-game', action.payload);\r\n    });\r\n}\r\n\r\nexport function* calculateSaga() {\r\n    yield takeEvery('SET_ACTION_REQUEST', function* (action: Action) {\r\n        const code = yield select((state: State) => state.editor.playerCode);\r\n        const result = yield call(codeExecutionWorker, code, evaluateFunction(action.payload), true);\r\n        console.log(result);\r\n        yield put(setResultCodeExecution(result))\r\n    });\r\n}\r\n\r\nexport function* sendActionSaga() {\r\n    yield takeEvery('SET_ACTION_RESULT', (action: Action) => {\r\n        if (action.payload.result !== undefined) {\r\n            webSocket.sendMessage('/app/jass/action', JSON.stringify({\r\n                actionType: action.payload.description,\r\n                payload: JSON.parse(action.payload.result)\r\n            }));\r\n        }\r\n    })\r\n}\r\n\r\nconst ref = (ref: any) => {\r\n    webSocket = ref\r\n}\r\n\r\nconst onWebsocketMessage = (message: WebsocketMessage) => {\r\n    store.dispatch(queueWebsocketMessage(message))\r\n}\r\n\r\nexport const JassGame = () => {\r\n    return <SockJsClient url={config.websocketUrl} topics={['/user/game']} onMessage={onWebsocketMessage}\r\n                         ref={ref}/>;\r\n}\r\n\r\nexport default JassGame;","interface Config {\r\n    websocketUrl: string;\r\n}\r\n\r\nconst dev: Config = {\r\n    websocketUrl: 'http://localhost:8080/ws'\r\n}\r\n\r\nconst prod: Config = {\r\n    websocketUrl: '/ws'\r\n}\r\n\r\nconst config = process.env.REACT_APP_STAGE === 'prod' ? prod : dev;\r\n\r\nexport default config;","import { CodeTestState, State } from '../../reducers';\r\nimport { connect } from 'react-redux';\r\nimport React from 'react';\r\nimport { Action, codeTestResult } from '../../actions';\r\nimport { Alert, Badge, Popover } from 'antd';\r\nimport { codeExecutionWorker } from '../../services/CodeExecutionWebWorker';\r\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\r\n\r\ninterface ClassStateValues {\r\n    code: string;\r\n    test: CodeTestState\r\n}\r\n\r\nfunction mapStateToProps(state: State): ClassStateValues {\r\n    return {\r\n        code: state.editor.playerCode,\r\n        test: state.codeTest\r\n    };\r\n}\r\n\r\nexport function* runTestsSaga() {\r\n    yield takeLatest('UPDATE_CODE', function* (action: Action) {\r\n        try {\r\n            const tests = [\r\n                {\r\n                    description: 'decideShift() should return a boolean',\r\n                    fn: `typeof decideShift([], []) === 'boolean'`\r\n                },\r\n                {\r\n                    description: 'choosePlayingMode() should return valid playing mode',\r\n                    fn: `['TOP_DOWN', 'BOTTOM_UP', 'TRUMP_HEARTS', 'TRUMP_SPADES', 'TRUMP_DIAMONDS', 'TRUMP_CLUBS'].includes(choosePlayingMode([], {}))`\r\n                }\r\n            ];\r\n\r\n            yield put(codeTestResult([]));\r\n\r\n            for (var i = 0; i < tests.length; i++) {\r\n                const currentTestResults = (yield select((state: State) => state.codeTest.results));\r\n                yield put(codeTestResult([\r\n                    ...currentTestResults,\r\n                    (yield call(codeExecutionWorker, action.payload, tests[i], true))\r\n                ]));\r\n            }\r\n\r\n        } catch (error) {\r\n            yield put(codeTestResult([{\r\n                description: 'Syntax error',\r\n                fn: action.payload,\r\n                executionTime: 0,\r\n                error: JSON.stringify(error)\r\n            }]));\r\n        }\r\n    });\r\n}\r\n\r\nconst CodeTestRunner = (state: ClassStateValues) => {\r\n    const badges = state.test.results.map(result => {\r\n        let content;\r\n        let status: 'error' | 'success';\r\n\r\n        if (result.error !== undefined) {\r\n            content = <Alert message=\"Failed\" description={result.description} type=\"error\" showIcon/>;\r\n            status = 'error';\r\n        } else if (result.result !== 'true') {\r\n            content = <Alert message=\"Failed\" description={result.description} type=\"error\" showIcon/>\r\n            status = 'error';\r\n        } else {\r\n            content = <Alert message=\"Success\" description={result.description} type=\"success\" showIcon/>\r\n            status = 'success';\r\n        }\r\n\r\n        return <Popover placement=\"bottom\" key={result.description} content={content}><Badge\r\n            status={status}/></Popover>\r\n    });\r\n\r\n    const totalExecutionTime = state.test.results.map(result => result.executionTime).reduce((a, b) => a + b, 0);\r\n\r\n    const red = Math.min(200, (totalExecutionTime / 1000 * 255) + 80);\r\n    const green = Math.min(200, ((1 - (totalExecutionTime / 1000)) * 255) + 80);\r\n\r\n    return (\r\n        <>\r\n            <div style={{ paddingRight: \"10px\", whiteSpace: 'nowrap' }}>\r\n                {badges}\r\n                <span style={{ fontWeight: 'bold', color: `rgb(${red}, ${green}, 26)`}}>{totalExecutionTime} ms</span>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(CodeTestRunner);\r\n","import { applyMiddleware, compose, createStore } from 'redux';\r\nimport rootReducer from '../reducers/index';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { calculateSaga, handleBackpressure, newGameSaga, sendActionSaga } from '../components/JassGame/JassGame';\r\nimport { runTestsSaga } from '../components/CodeEditor/CodeTestRunner';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(sagaMiddleware))\r\n);\r\n\r\nsagaMiddleware.run(newGameSaga);\r\nsagaMiddleware.run(calculateSaga);\r\nsagaMiddleware.run(sendActionSaga);\r\nsagaMiddleware.run(runTestsSaga);\r\nsagaMiddleware.run(handleBackpressure);\r\n\r\n\r\nexport default store;","import React from \"react\";\r\nimport ReactJson from \"react-json-view\";\r\n\r\n\r\nexport const JSONObject = (props: { name: string, object: any, collapsed?: number }) => {\r\n    return <div>\r\n        <ReactJson\r\n            theme={'grayscale:inverted'}\r\n            iconStyle={'triangle'}\r\n            indentWidth={2}\r\n            style={{ display: 'inline-block' }}\r\n            name={props.name}\r\n            collapsed={props.collapsed}\r\n            enableClipboard={false}\r\n            displayObjectSize={false}\r\n            displayDataTypes={false}\r\n            src={props.object}/>\r\n    </div>\r\n}\r\n","import { State } from '../../reducers';\r\nimport { connect } from 'react-redux';\r\nimport React from 'react';\r\nimport { Col, Divider, Row } from 'antd';\r\nimport { CodeExecutionResult } from '../../services/CodeExecutionWebWorker';\r\nimport ReactJson from 'react-json-view';\r\nimport { JSONObject } from \"../ui/JSONObject\";\r\n\r\ninterface Props {\r\n    code: string;\r\n    actionResult: CodeExecutionResult;\r\n}\r\n\r\nconst mapStateToProps = (state: State): Props => {\r\n    return {\r\n        code: state.editor.playerCode,\r\n        actionResult: state.actionResult,\r\n    };\r\n}\r\n\r\nconst MoveDebugger = (state: Props) => {\r\n\r\n    console.log(state.actionResult);\r\n\r\n    if (state.actionResult === undefined) {\r\n        return <div>Game hast not started yet.</div>\r\n    }\r\n\r\n    const functionName = state.actionResult.fn.match(/([a-zA-Z_{1}][a-zA-Z0-9_]+)(?=\\()/g)[0];\r\n    const functionParameters = JSON.parse(`[${state.actionResult.fn.match(/\\b[^()]+\\((.*)\\)$/)[1]}]`);\r\n\r\n    let functionRegex = /function\\s+(?<name>\\w+)\\s*\\((?<arguments>(?:[^()]+)*)?\\s*\\)/g,\r\n        match,\r\n        matches = [];\r\n\r\n    while (match = functionRegex.exec(state.code)) {\r\n        matches.push(match.groups);\r\n    }\r\n\r\n    const functionDefinition = matches.find((match) => match.name === functionName);\r\n    const argumentNames = functionDefinition.arguments.split(',').map(s => s.trim());\r\n\r\n\r\n    let result;\r\n\r\n    if (state.actionResult.result !== undefined) {\r\n        if (typeof JSON.parse(state.actionResult.result) === 'object') {\r\n            result = <JSONObject name={'result'} object={JSON.parse(state.actionResult.result)}/>\r\n        } else {\r\n            result = <span style={{ fontFamily: 'monospace' }}>{state.actionResult.result}</span>;\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <Row>\r\n            <Col span={18}>\r\n                <h3>Next move</h3>\r\n                <span style={{ fontFamily: 'monospace' }}>{functionName}({argumentNames.join(\", \")});</span>\r\n            </Col>\r\n            <Col span={6} style={{textAlign: 'right'}}>\r\n                <h3>Execution time</h3>\r\n                <span style={{ fontFamily: 'monospace' }}>{state.actionResult.executionTime} ms</span>\r\n            </Col>\r\n        </Row>\r\n        <Divider/>\r\n        <Row>\r\n            <Col span={24}>\r\n                <h3>Function call</h3>\r\n                <pre>{functionName}</pre>\r\n                {!!state.actionResult.fn && functionParameters.map((parameter: any, i: number) => (\r\n                    <div key={i} style={{ paddingLeft: '20px' }}>\r\n                        <ReactJson\r\n                            theme={'grayscale:inverted'}\r\n                            iconStyle={'triangle'}\r\n                            indentWidth={2}\r\n                            style={{ display: 'inline-block' }}\r\n                            name={argumentNames[i]}\r\n                            collapsed={true}\r\n                            enableClipboard={false}\r\n                            displayObjectSize={false}\r\n                            displayDataTypes={false}\r\n                            src={parameter}/>\r\n                    </div>)\r\n                )}\r\n                <pre>);</pre>\r\n            </Col>\r\n        </Row>\r\n        <Divider/>\r\n        <Row>\r\n            {state.actionResult.result && <Col span={12}>\r\n                <h3>Result</h3>\r\n                {result}\r\n            </Col>}\r\n            {state.actionResult.error && <Col span={24}>\r\n                <h3>Error</h3>\r\n                {state.actionResult.error}\r\n            </Col>}\r\n        </Row>\r\n    </div>\r\n}\r\n\r\nexport default connect(mapStateToProps)(MoveDebugger);","import { ConsoleLog } from \"../../services/CodeExecutionWebWorker\";\r\nimport React from \"react\";\r\nimport { JSONObject } from \"../ui/JSONObject\";\r\nimport { Divider } from \"antd\";\r\n\r\nexport const ConsoleView = (props: { logs: ConsoleLog[] }) => {\r\n\r\n    const logOutput = props.logs.map((log: ConsoleLog) => {\r\n        const payload = log.payload;\r\n\r\n        if (payload.length === 2 && typeof payload[0] === 'string' && typeof payload[1] === 'object') {\r\n            return <JSONObject name={payload[0]} object={payload[1]} collapsed={2}/>\r\n        }\r\n\r\n        return payload.map((log, i) => {\r\n            switch (typeof log) {\r\n                case \"object\":\r\n                    return <span key={i}><JSONObject name={null} object={log} collapsed={2}/>&nbsp;</span>\r\n                default:\r\n                    return <span key={i} style={{ fontFamily: 'monospace' }}>{log}&nbsp;</span>;\r\n            }\r\n        });\r\n    });\r\n\r\n    if (logOutput.length === 0) {\r\n        return <div>-</div>;\r\n    }\r\n\r\n    if(logOutput.length > 100) {\r\n        return <div>Too many logs.</div>\r\n    }\r\n\r\n    return <div>{logOutput.map((logOutputEntry, i) => <div key={i}>{logOutputEntry}<Divider/></div>)}</div>;\r\n}","import React from 'react';\r\nimport { Card, CardState, Team } from '../../reducers';\r\n\r\nexport const TeamStack = (props: { cards: CardState[], team: Team }) => {\r\n    const teamCards = props.cards.filter(c => c.team === props.team.name);\r\n\r\n    return <div className={'team-stack stack'}>\r\n        {teamCards.map((c, i) =>\r\n            <div key={i} className={'card-wrapper'}\r\n                 style={{\r\n                     top: `calc(0px + ${i * 0.25}px)`,\r\n                     left: `calc(-35px + ${i * 0.25}px)`,\r\n                 }}>\r\n                <UnknownCardView/>\r\n            </div>)}\r\n    </div>\r\n}\r\n\r\nexport const TableStack = (props: { cards: CardState[], teams: Team[], nextPlayer: string }) => {\r\n    const tableStack = props.cards\r\n        .filter(s => {\r\n            return s.playOrder > 0 && !s.team\r\n        })\r\n        .sort((a, b) => a.playOrder - b.playOrder);\r\n\r\n    const playerOrder = [\r\n        props.teams[0].players[0],\r\n        props.teams[1].players[0],\r\n        props.teams[0].players[1],\r\n        props.teams[1].players[1],\r\n    ];\r\n\r\n    const startingPlayerIndex = playerOrder.indexOf(tableStack.length > 0 ? tableStack[0].player : props.nextPlayer);\r\n\r\n    const tableStackCards = tableStack\r\n        .map((cs, i) =>\r\n            <div key={JSON.stringify(cs.card)} className={'card-wrapper'}\r\n                 style={{\r\n                     transform: `rotate(calc(180deg + ${startingPlayerIndex * -90}deg - ${i * 90}deg)`,\r\n                 }}>\r\n                <CardView card={cs.card} top={'-35px'}/>\r\n            </div>);\r\n\r\n    return <div className={'table-stack stack'}>\r\n        {tableStackCards}\r\n    </div>\r\n}\r\n\r\nexport const OtherPlayerCards = (props: { cards: CardState[], player: string, nextPlayer: string }) => {\r\n    const alreadyPlayedCardsCount = props.cards.filter(c => c.player === props.player).length;\r\n    const handCardCount = 9 - alreadyPlayedCardsCount;\r\n\r\n    return <div className=\"other-player-hand hand\"\r\n                style={{ opacity: props.nextPlayer === props.player ? 1 : 0.5 }}>\r\n        {Array.from(Array(handCardCount)).map((unused, i) =>\r\n            <div key={i} className=\"card-wrapper\" style={{\r\n                top: 'calc(-49px)',\r\n                left: `calc(-35px + ${(i - ((handCardCount - 1) / 2)) * 10}px)`,\r\n                transformOrigin: '50% 50%',\r\n                transform: `rotate(${(i - ((handCardCount - 1) / 2)) * 10}deg)`\r\n            }}>\r\n                <UnknownCardView/>\r\n            </div>)\r\n        }\r\n    </div>\r\n}\r\n\r\nexport const PlayerCards = (props: { cards: CardState[], playerName: string, nextPlayer: string }) => {\r\n    const handCards = props.cards\r\n        .filter(s => s.player === props.playerName && s.playOrder === undefined)\r\n        .sort((a, b) => a.points - b.points)\r\n        .sort((a, b) => a.card.suit < b.card.suit ? 1 : -1);\r\n\r\n    const handCardCount = handCards.length;\r\n\r\n    const cards = handCards.map((c, i) =>\r\n        <div key={i} className=\"card-wrapper\" style={{\r\n            top: 'calc(-49px)',\r\n            left: `calc(-35px + ${(i - ((handCardCount - 1) / 2)) * 10}px)`,\r\n            transformOrigin: '50% 50%',\r\n            transform: `rotate(${(i - ((handCardCount - 1) / 2)) * 10}deg)`\r\n        }}>\r\n            <CardView card={c.card}/>\r\n        </div>)\r\n\r\n    return <div className={'player-hand hand'}  style={{ opacity: props.nextPlayer === props.playerName ? 1 : 0.5 }}>\r\n        {cards}\r\n    </div>\r\n}\r\n\r\nexport const UnknownCardView = () => {\r\n    return <div className={'card unknown'} style={{\r\n        backgroundImage: `url(./cards/card_back.svg)`,\r\n    }}>\r\n    </div>\r\n}\r\n\r\nexport const CardView = (props: { card: Card, top?: string}) => {\r\n    return <div className={'card'} style={{\r\n        top: typeof props.top === 'string' ? props.top: '0px',\r\n        backgroundImage: `url(./cards/${props.card.suit}_${props.card.color}.svg)`,\r\n    }}>\r\n    </div>\r\n}\r\n","import { GameState, State } from '../../reducers';\r\nimport { connect } from 'react-redux';\r\nimport React from 'react';\r\nimport { OtherPlayerCards, PlayerCards, TableStack, TeamStack } from './CardView';\r\n\r\ninterface Props {\r\n    gameState: GameState;\r\n}\r\n\r\nconst mapStateToProps = (state: State) => {\r\n    return {\r\n        gameState: state.gameState\r\n    };\r\n}\r\n\r\nexport const JassBoardView = (state: Props) => {\r\n    console.log(state);\r\n\r\n    if (state.gameState === null) {\r\n        return <div>Game has not started yet.</div>\r\n    }\r\n\r\n    return <div className={'jass-table'} style={{ backgroundImage: 'url(\"fabric.jpg\")' }}>\r\n        <div className={'col'}>\r\n            <div/>\r\n        </div>\r\n        <div className={'col'}>\r\n            <div style={{ transform: 'rotate(180deg)' }}>\r\n                <OtherPlayerCards cards={state.gameState.cards} player={state.gameState.teams[0].players[1]} nextPlayer={state.gameState.nextPlayer}/>\r\n            </div>\r\n        </div>\r\n        <div className={'col'}>\r\n            <div style={{ transform: 'rotate(-90deg)' }}>\r\n                <TeamStack cards={state.gameState.cards} team={state.gameState.teams[1]}/>\r\n            </div>\r\n        </div>\r\n\r\n        <div className={'col'}>\r\n            <div style={{ transform: 'rotate(90deg)' }}>\r\n                <OtherPlayerCards cards={state.gameState.cards} player={state.gameState.teams[1].players[1]} nextPlayer={state.gameState.nextPlayer}/>\r\n            </div>\r\n        </div>\r\n        <div className={'col'}>\r\n            <div><TableStack cards={state.gameState.cards} nextPlayer={state.gameState.nextPlayer} teams={state.gameState.teams}/></div>\r\n        </div>\r\n        <div className={'col'}>\r\n            <div style={{ transform: 'rotate(-90deg)' }}>\r\n                <OtherPlayerCards cards={state.gameState.cards} player={state.gameState.teams[1].players[0]} nextPlayer={state.gameState.nextPlayer}/>\r\n            </div>\r\n        </div>\r\n        <div className={'col'}/>\r\n        <div className={'col'}>\r\n            <div>\r\n                <PlayerCards cards={state.gameState.cards} nextPlayer={state.gameState.nextPlayer} playerName={state.gameState.playerName}/>\r\n            </div>\r\n        </div>\r\n        <div className={'col'}>\r\n            <TeamStack cards={state.gameState.cards} team={state.gameState.teams[0]}/>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nexport default connect(mapStateToProps)(JassBoardView);","import { GameState, State } from \"../../reducers\";\r\nimport { Col, Row, Divider } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n    gameState: GameState,\r\n    renderView: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: State): Props => {\r\n    return {\r\n        gameState: state.gameState,\r\n        renderView: state.debugger.renderGameState\r\n    };\r\n};\r\n\r\nconst mapNextActionToHumanReadable = (state: GameState) => {\r\n    switch (state.nextAction) {\r\n        case 'START_ROUND':\r\n            return 'Start round';\r\n        case 'DECIDE_SHIFT':\r\n            return 'Decide shift';\r\n        case 'SET_STARTING_PLAYER':\r\n            return 'Set starting player';\r\n        case 'SET_PLAYING_MODE':\r\n            return 'Choose playing mode';\r\n        case 'PLAY_CARD':\r\n            return 'Play card';\r\n        case 'START_GAME':\r\n            return 'Start game';\r\n        case 'HAND_OUT_CARDS':\r\n            return 'Hand out cards';\r\n        case 'START_STICH':\r\n            return 'Start stich';\r\n        case 'END_STICH':\r\n            return 'End stich';\r\n        case 'END_ROUND':\r\n            return 'End round';\r\n        case 'END_GAME':\r\n            return 'Game ended'\r\n        case 'EXIT':\r\n            return 'Game ended'\r\n        default:\r\n            return '';\r\n    }\r\n}\r\n\r\nconst mapPlayerToHumanReadable = (state: GameState) => {\r\n    const players = state.teams.flatMap(t => t.players);\r\n\r\n    switch (players.indexOf(state.nextPlayer)) {\r\n        case 0:\r\n            return 'Team 1 / You';\r\n        case 1:\r\n            return 'Team 1 / Player-2'\r\n        case 2:\r\n            return 'Team 2 / Player-3';\r\n        case 3:\r\n            return 'Team 2 / Player-4';\r\n        default:\r\n            return '-';\r\n    }\r\n}\r\n\r\nconst mapPlayingModeToHumanReadable = (state: GameState) => {\r\n    switch (state.playingMode) {\r\n        case 'TOP_DOWN':\r\n            return 'Top down';\r\n        case 'BOTTOM_UP':\r\n            return 'Bottom up';\r\n        case 'TRUMP_SPADES':\r\n            return 'Spades';\r\n        case 'TRUMP_CLUBS':\r\n            return 'Clubs';\r\n        case 'TRUMP_HEARTS':\r\n            return 'Hearts';\r\n        case 'TRUMP_DIAMOND':\r\n            return 'Diamond';\r\n        default:\r\n            return '-';\r\n    }\r\n}\r\n\r\nexport const JassStateView = (state: Props) => {\r\n    const gameStateView = state.gameState ? (\r\n        <div>\r\n            <Row>\r\n                <Col span={12}>\r\n                    <h3>Points Team 1 (you)</h3>\r\n                    {state.gameState.teams[0].points}\r\n                </Col>\r\n                <Col span={12}>\r\n                    <h3>Points Team 2</h3>\r\n                    {state.gameState.teams[1].points}\r\n                </Col>\r\n            </Row>\r\n\r\n            <br />\r\n\r\n            <Row>\r\n                <Col span={12}>\r\n                    <h3>Next action</h3>\r\n                    {mapNextActionToHumanReadable(state.gameState)}\r\n                </Col>\r\n                <Col span={12}>\r\n                    <h3>Next player</h3>\r\n                    {mapPlayerToHumanReadable(state.gameState)}\r\n                </Col>\r\n            </Row>\r\n\r\n            <br />\r\n            <Row>\r\n                <Col span={12}>\r\n                    <h3>Trump</h3>\r\n                    {mapPlayingModeToHumanReadable(state.gameState)}\r\n                </Col>\r\n                <Col span={12}>\r\n                    <h3>Step</h3>\r\n                    {state.gameState.revision}\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    ) : <div>Game has not started yet.</div>;\r\n\r\n    return <div>\r\n        {gameStateView}\r\n    </div>\r\n}\r\n\r\nexport default connect(mapStateToProps)(JassStateView);","import { GameDebuggerState, State } from '../../reducers';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Affix, Badge, Button, Col, Collapse, Divider, Row, Select, Slider, Switch } from 'antd';\r\nimport { CaretRightOutlined } from '@ant-design/icons';\r\nimport { runNewGame, setDebuggerSettings, setPaused } from '../../actions';\r\nimport store from '../../store';\r\n\r\n// @ts-ignore\r\nimport { SelectValue } from 'antd/lib/select';\r\nimport MoveDebugger from './MoveDebugger';\r\nimport { ConsoleView } from \"./ConsoleView\";\r\nimport JassBoardView from \"../JassGame/JassBoardView\";\r\nimport JassStateView from \"../JassGame/JassStateView\";\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst { Option } = Select;\r\n\r\nconst mapStateToProps = (state: State) => {\r\n    return state;\r\n}\r\n\r\nconst changeSpeed = (state: GameDebuggerState, speed: number) => {\r\n    store.dispatch(setDebuggerSettings({\r\n        ...state,\r\n        ...{\r\n            speed: speed,\r\n        }\r\n    }));\r\n}\r\n\r\nconst changePauseOnTurn = (state: GameDebuggerState, value: boolean) => {\r\n    store.dispatch(setDebuggerSettings({\r\n        ...state,\r\n        ...{\r\n            pauseOnTurn: value,\r\n        }\r\n    }));\r\n}\r\n\r\nconst stateFilter = (state: GameDebuggerState, value: 'ALL' | 'PLAYER_ONLY') => {\r\n    store.dispatch(setDebuggerSettings({\r\n        ...state,\r\n        ...{\r\n            stateFilter: value,\r\n        }\r\n    }))\r\n}\r\n\r\nconst GameDebugger = (state: State) => {\r\n    const consoleLogs = state.actionResult?.consoleOutput || [];\r\n\r\n    const debuggerTitle = (\r\n        <div style={{ width: '100%'}}>\r\n            Debugger\r\n            {state.paused && <span style={{float: 'right'}}><Badge offset={[0,-3]} count={1}/></span>}\r\n        </div>)\r\n\r\n    const consoleTitle = (\r\n        <div style={{ width: '100%'}}>\r\n            Console\r\n            {state.paused && <span style={{float: 'right'}}><Badge offset={[0,-3]} count={consoleLogs.length}/></span>}\r\n        </div>\r\n    );\r\n\r\n    const stateTitle = (\r\n        <div style={{ width: '100%'}}>\r\n            State\r\n            {!!state.gameState && <span style={{float: 'right'}}><Badge style={{ backgroundColor: '#4a4a4a' }} overflowCount={1000} offset={[0,-3]} count={state.gameState.revision}/></span>}\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div>\r\n            <Affix offsetTop={0}>\r\n                <div style={{ height: 'calc(100vh)', overflowY: 'scroll' }}>\r\n                    <Collapse defaultActiveKey={['board', 'state']}>\r\n                        <Panel header=\"Board\" key=\"board\">\r\n                            <JassBoardView/>\r\n                        </Panel>\r\n                        <Panel header={stateTitle} key=\"state\">\r\n                            <JassStateView/>\r\n                        </Panel>\r\n                        <Panel header=\"Debug settings\" key=\"settings\">\r\n                            <Row>\r\n                                <Col span={12}>\r\n                                    <h3>Speed {state.debugger.speed}</h3>\r\n                                    <div style={{ paddingRight: '20px' }}>\r\n                                        <Slider value={state.debugger.speed}\r\n                                                onChange={(e: number) => changeSpeed(state.debugger, e)}/>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col span={12}>\r\n                                    <h3>Debug</h3>\r\n                                    <Switch checked={state.debugger.pauseOnTurn}\r\n                                            onChange={(e) => changePauseOnTurn(state.debugger, e)}/> Debug moves\r\n                                </Col>\r\n                            </Row>\r\n                            <Divider/>\r\n                            <Row>\r\n                                <Col span={12}>\r\n                                    <h3>Filter moves</h3>\r\n                                    <Select\r\n                                        style={{width: '100%'}}\r\n                                        labelInValue\r\n                                        defaultValue={{ value: (state.debugger.stateFilter as string) } as SelectValue}\r\n                                        onChange={(e: any) => stateFilter(state.debugger, e.value)}>\r\n                                        <Option value=\"ALL\">All moves</Option>\r\n                                        <Option value=\"PLAYER_ONLY\">Your moves only</Option>\r\n                                    </Select>\r\n                                </Col>\r\n                                <Col span={12}>\r\n\r\n                                </Col>\r\n                            </Row>\r\n                        </Panel>\r\n                        <Panel header={debuggerTitle} key=\"debugger\">\r\n                            <MoveDebugger/>\r\n                        </Panel>\r\n                        <Panel header={consoleTitle} key=\"console\">\r\n                            <ConsoleView logs={consoleLogs}/>\r\n                        </Panel>\r\n                    </Collapse>\r\n                </div>\r\n            </Affix>\r\n        </div>);\r\n}\r\n\r\nexport default connect(mapStateToProps)(GameDebugger);","import { State } from '../../reducers';\r\nimport React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button, message } from 'antd';\r\nimport { CaretRightOutlined } from '@ant-design/icons';\r\nimport { runNewGame, setPaused } from '../../actions';\r\nimport store from '../../store';\r\n\r\ninterface Props {\r\n    filter: string;\r\n    nextAction: string;\r\n    paused: boolean;\r\n    codeTestState: string;\r\n}\r\n\r\nconst onKeyDown = (e: KeyboardEvent, state: Props) => {\r\n    if (e.keyCode === 119) {\r\n        e.preventDefault();\r\n        if (state.paused) {\r\n            resume();\r\n        } else {\r\n            startNewGame(state.filter);\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: State): Props => {\r\n    return {\r\n        filter: state.debugger.stateFilter,\r\n        nextAction: state.gameState?.nextAction,\r\n        paused: state.paused,\r\n        codeTestState: state.codeTest.status,\r\n    }\r\n}\r\n\r\nconst startNewGame = (filter: string) => {\r\n    store.dispatch(runNewGame(JSON.stringify({ name: 'asdf', filter: filter })));\r\n}\r\n\r\nconst resume = () => {\r\n    store.dispatch(setPaused(false));\r\n}\r\n\r\nconst StartNewGameButton = (state: Props) => {\r\n    const isGameRunning = state.nextAction !== 'EXIT' && state.nextAction !== undefined;\r\n\r\n    useEffect(() => {\r\n        const keyDown = (e: KeyboardEvent) => onKeyDown(e, state);\r\n\r\n        document.addEventListener('keydown', keyDown, false);\r\n\r\n        return () => {\r\n            document.removeEventListener('keydown', keyDown)\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {!state.paused && <Button\r\n                type=\"primary\"\r\n                disabled={state.codeTestState === 'FAIL'}\r\n                icon={<CaretRightOutlined/>}\r\n                loading={isGameRunning}\r\n                onClick={() => startNewGame(state.filter)}>\r\n                {!isGameRunning && <span>Run (F8)</span>}\r\n                {isGameRunning && <span>Running...</span>}\r\n            </Button>}\r\n            {state.paused && <Button\r\n                type=\"primary\"\r\n                icon={<CaretRightOutlined/>}\r\n                onClick={() => resume()}>\r\n                Step (F8)\r\n            </Button>}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps)(StartNewGameButton);","import React, { useEffect } from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\n// @ts-ignore\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-javascript';\r\nimport { CodeEditorState, State } from '../../reducers';\r\nimport { updateCode } from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store';\r\nimport { Affix, Col, message, Row } from 'antd';\r\nimport CodeTestRunner from \"./CodeTestRunner\";\r\nimport GameDebugger from './GameDebugger';\r\nimport JassGame from \"../JassGame/JassGame\";\r\nimport StartNewGameButton from \"./StartNewGameButton\";\r\n// @ts-ignore\r\n\r\nconst mapStateToProps = (state: State): CodeEditorState => {\r\n    return state.editor;\r\n}\r\n\r\nconst onValueChange = (code: string) => {\r\n    store.dispatch(updateCode(code))\r\n}\r\n\r\nconst onKeyDown = (e: KeyboardEvent) => {\r\n    if (e.keyCode === 83 && (navigator.platform.match(\"Mac\") ? e.metaKey : e.ctrlKey)) {\r\n        e.preventDefault();\r\n        localStorage.setItem('playerCode', store.getState().editor.playerCode)\r\n        message.success('Saved your code in local storage.');\r\n    }\r\n}\r\n\r\nconst CodeEditor = (state: CodeEditorState) => {\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', onKeyDown, false);\r\n\r\n        return () => {\r\n            document.removeEventListener('keydown', onKeyDown)\r\n        }\r\n    });\r\n\r\n    return <div>\r\n        <JassGame/>\r\n        <Row>\r\n            <Col span={24}>\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col span={14}>\r\n                <div style={{ position: 'absolute', zIndex: 10, right: 16, top: 16, width: '100%', textAlign: 'center' }}>\r\n                    <Affix offsetTop={16}>\r\n                        <div style={{position: 'absolute', right: 0}}><StartNewGameButton/></div>\r\n                        <div style={{display: 'inline-block', paddingTop: '4px'}}><CodeTestRunner/></div>\r\n                    </Affix>\r\n                </div>\r\n                <Editor\r\n                    value={state.playerCode}\r\n                    onValueChange={onValueChange}\r\n                    highlight={code => highlight(code, languages.js)}\r\n                    padding={20}\r\n                    style={{\r\n                        fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n                        fontSize: 16,\r\n                    }}\r\n                    className=\"container__editor\"\r\n                />\r\n            </Col>\r\n            <Col span={10}>\r\n                <GameDebugger/>\r\n            </Col>\r\n        </Row></div>;\r\n}\r\n\r\nexport default connect(mapStateToProps)(CodeEditor);","import { State } from '../reducers';\r\nimport { Steps } from 'antd';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setNextFlowStep } from '../actions';\r\nimport store from '../store';\r\nimport CodeEditor from './CodeEditor/CodeEditor';\r\n\r\nconst { Step } = Steps;\r\n\r\nconst mapStateToProps = (state: State) => {\r\n    return state;\r\n}\r\n\r\nconst Flow = (state: State) => {\r\n\r\n    const setFlowStep = (next: number) => {\r\n        store.dispatch(setNextFlowStep(next));\r\n    }\r\n\r\n    const step = state.flow.currentStep;\r\n\r\n    const contentFlow = [\r\n        <CodeEditor/>,\r\n        <div>This feature is not finished yet.</div>,\r\n        <div>This feature is not finished yet.</div>\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Steps current={state.flow.currentStep} onChange={setFlowStep}>\r\n                <Step title=\"Code & Test\" description=\"Code your strategy\"/>\r\n                <Step title=\"Play Game\" description=\"Run against others\"/>\r\n                <Step title=\"Submit\" description=\"Submit your strategy\"/>\r\n            </Steps>\r\n\r\n            <br />\r\n\r\n            {contentFlow[step]}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps)(Flow);","import React from 'react';\r\nimport './App.css';\r\nimport { Breadcrumb, Layout, Menu } from 'antd';\r\nimport Flow from './components/Flow';\r\n\r\nconst { Header, Content} = Layout;\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Layout>\r\n                <Header className=\"header\">\r\n                    <div className=\"logo\"/>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                        <Menu.Item key=\"1\">nav 1</Menu.Item>\r\n                        <Menu.Item key=\"2\">nav 2</Menu.Item>\r\n                        <Menu.Item key=\"3\">nav 3</Menu.Item>\r\n                    </Menu>\r\n                </Header>\r\n                <Layout>\r\n                    <Layout style={{ padding: '0 24px 24px' }}>\r\n                        <Breadcrumb style={{ margin: '16px 0' }}>\r\n                            <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                            <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                            <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                        </Breadcrumb>\r\n                        <Content\r\n                            className=\"site-layout-background\"\r\n                            style={{\r\n                                padding: 24,\r\n                                margin: 0,\r\n                                minHeight: 280,\r\n                            }}>\r\n                            <Flow/>\r\n                        </Content>\r\n                    </Layout>\r\n                </Layout>\r\n            </Layout>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from './store/index';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}